/***********************************************************************

	This file is part of KEEL-software, the Data Mining tool for regression, 
	classification, clustering, pattern mining and so on.

	Copyright (C) 2004-2010
	
	F. Herrera (herrera@decsai.ugr.es)
    L. Sánchez (luciano@uniovi.es)
    J. Alcalá-Fdez (jalcala@decsai.ugr.es)
    S. García (sglopez@ujaen.es)
    A. Fernández (alberto.fernandez@ujaen.es)
    J. Luengo (julianlm@decsai.ugr.es)

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see http://www.gnu.org/licenses/
  
**********************************************************************/

/* Generated By:JavaCC: Do not edit this line. DataParserConstants.java */
package keel.Algorithms.Rule_Learning.Swap1;

/**
 * Contains constants used by the data parser. These constants are integer identifiers of common characters or strings in the data file like EOF character.
 * @author unknown
 */
public interface DataParserConstants {

    /**
     * Data Parser Indentifier for EOF.
     */
    int EOF = 0;

    /**
     *  Data Parser Indentifier for COM.
     */
    int COM = 6;

    /**
     *  Data Parser Indentifier for COM2.
     */
    int COM2 = 7;

    /**
     *   Data Parser Indentifier for Ralation string.
     */
    int RELATION = 8;

    /**
     * Data Parser Indentifier for attributes lines.
     */
    int ATTRIBUTE = 9;

    /**
     *  Data Parser Indentifier for inputs line.
     */
    int INPUTS = 10;

    /**
     * Data Parser Indentifier for output line.
     */
    int OUTPUTS = 11;

    /**
     *  Data Parser Indentifier for data section.
     */
    int DATA = 12;

    /**
     * Data Parser Indentifier for integer data.
     */
    int INTEG = 13;

    /**
     * Data Parser Indentifier for real data.
     */
    int REAL = 14;

    /**
     * Data Parser Indentifier for output line.
     */
    int EXP = 15;

    /**
     *  Data Parser Indentifier for opened squared bracket "[".
     */
    int COPENED = 16;

    /**
     * Data Parser Indentifier for closed squared bracket "]".
     */
    int CCLOSED = 17;

    /**
     * Data Parser Indentifier for opened bracket "{".
     */
    int CLOPENED = 18;

    /**
     * Data Parser Indentifier for closed bracket "}".
     */
    int CLCLOSED = 19;

    /**
     * Data Parser Indentifier for coma character.
     */
    int COLON = 20;

    /**
     * Data Parser Indentifier for semicolon character.
     */
    int SCOLON = 21;

    /**
     * Data Parser Indentifier for null data.
     */
    int NULL = 22;

    /**
     * Data Parser Indentifier for integer constant.
     */
    int INT_CONST = 23;

    /**
     * Data Parser Indentifier for boolean constant.
     */
    int BOOLEAN_CONST = 24;

    /**
     * Data Parser Indentifier for real constant.
     */
    int REAL_CONST = 25;

    /**
     * Data Parser Indentifier for string constant.
     */
    int CAD_CONST = 26;

    /**
     * Data Parser Indentifier for indentation.
     */
    int IDENT = 27;

    /**
     * Data Parser Indentifier for a digit.
     */
    int DIGIT = 28;

    /**
     * Data Parser Indentifier for a letter.
     */
    int LETTER = 29;

    /**
     * Data Parser Indentifier for lex error.
     */
    int ERR_LEX = 30;

    /**
     * Data Parser Indentifier for default value.
     */
    int DEFAULT = 0;

    /**
     * Token images array.
     */
    String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\b\"",
    "\"\\n\"",
    "\"\\r\"",
    "<COM>",
    "<COM2>",
    "\"@relation\"",
    "\"@attribute\"",
    "\"@inputs\"",
    "\"@outputs\"",
    "\"@data\"",
    "\"integer\"",
    "\"real\"",
    "<EXP>",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\",\"",
    "\";\"",
    "<NULL>",
    "<INT_CONST>",
    "<BOOLEAN_CONST>",
    "<REAL_CONST>",
    "<CAD_CONST>",
    "<IDENT>",
    "<DIGIT>",
    "<LETTER>",
    "<ERR_LEX>",
  };

}

